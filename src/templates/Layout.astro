---
import '../styles/main.css'

export interface Props {
  title: string;
  language?: string;
  publication?: string;
}

const { title, language, publication } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang={language ? language : 'nb-NO'}>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    {publication === 'DN' &&
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap" rel="stylesheet">
      <link
        rel="stylesheet"
        href="https://static1.dn.no/dn/static/assets/css/nhstfonts.css"
      />
    }

    {publication !== 'DN' &&
       <link href="https://fonts.googleapis.com/css2?family=Noto+Serif:wght@400;700&family=Inter:wght@400;700;800&display=swap" rel="stylesheet">
    }
    <link rel="icon" href="/favicon.ico" sizes="any"><!-- 32×32 -->
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png"><!-- 180×180 -->
    <link rel="manifest" href="/manifest.webmanifest">
  </head>
  <body>
    <slot />
  </body>
</html>


<script>
  /* Get URL on load */
  const url = new URL(window.location.href);

  /* Get defaults, set params and update URL on load */
  
  const defaultTheme = document.querySelector("#theme");
  const defaultLayout = document.querySelector("#layout");

  url.searchParams.append('theme', defaultTheme.value);
  url.searchParams.append('layout', defaultLayout.value);
  window.history.pushState({}, "", url);

  /* Set data-attributes from params on URL on load */
  const theme = url.searchParams.get("theme");
  const layout = url.searchParams.get("layout");

  document.body.setAttribute("data-theme", theme);
  document.body.setAttribute("data-layout", layout);

  const setChecked = function (el: string, attr: string) {
    const options = document.querySelectorAll(el);
    options.forEach((option) => {
      if (option.value === attr) {
        option.setAttribute("selected", "");
      }
    });
  };

  setChecked("#theme option", theme);
  setChecked("#layout option", layout);

  /* Update URL and data-attrbutes on select change */
  document.addEventListener("change", (event: any) => {
    if (event.target.matches("#theme")) {
      updateURL("theme");
      let theme = url.searchParams.get("theme");
      document.body.setAttribute("data-theme", theme);
    }


    if (event.target.matches("#layout")) {
      updateURL("layout");
      let layout = url.searchParams.get("layout");
      document.body.setAttribute("data-layout", layout);
    }
  });

  /* Function to update URL on select change */
  const updateURL = function (key: any) {
    url.searchParams.set(key, event.target.value);
    window.history.pushState({}, "", url);
  };
</script>